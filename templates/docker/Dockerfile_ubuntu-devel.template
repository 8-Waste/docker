# RAPIDS Dockerfile for Ubuntu
#
# This multi-stage Dockerfile is used to create the "devel" image.
#
# RAPIDS is built from-source and installed in the 'rapids' conda
# environment. The sources and toolchains to build RAPIDS are included in this
# image. RAPIDS jupyter notebooks are also provided, as well as jupyterlab and
# all the dependencies required to run them.
#
# Copyright (c) 2019, NVIDIA CORPORATION.

ARG CUDA_TYPE=devel
ARG CUDA_VERSION=10.0
ARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}
ARG LINUX_VERSION=ubuntu18.04
ARG PYTHON_VERSION=3.6
FROM gpuci/miniconda-cuda:${CUDA_VERSION}-${CUDA_TYPE}-${LINUX_VERSION}-py${PYTHON_VERSION} AS base

ARG CC_VERSION
ARG CXX_VERSION
ARG CUDA_VERSION
ARG CUDA_MAJORMINOR_VERSION
ARG PARALLEL_LEVEL

runcommand ../../commands/utils/dumpDockerArgsFromConfig.sh

ENV CC=/usr/bin/gcc-${CC_VERSION}
ENV CXX=/usr/bin/g++-${CXX_VERSION}
ENV CUDAHOSTCXX=$CXX
ENV CUDA_VERSION=${CUDA_MAJORMINOR_VERSION}
ENV RAPIDS_DIR=/rapids

insertfile conda_install_devel

# 'rapidsdevtool.sh buildDockerImage' sets up the build context, including the
#  rapids directory being COPY'd below. See rapidsdevtool.sh help for details.
RUN mkdir -p ${RAPIDS_DIR}
COPY rapids ${RAPIDS_DIR}
COPY utils ${RAPIDS_DIR}/utils
# Add test file for testing notebooks from within the container
COPY supportfiles/test.sh /test.sh

# clone.sh is generated by `rapidsdevtool.sh buildDockerImage` and is based on
# the URLs and branch names in the config file.
RUN cd ${RAPIDS_DIR} && ./clone.sh

# xgboost build will not find nccl in the conda env without this env var
ENV NCCL_ROOT=/conda/envs/rapids

# Assume the build.sh script is present.
# (this is done automatically when using 'rapidsdevtool.sh buildDockerImage',
#  see rapidsdevtool.sh help for more details)
RUN cd ${RAPIDS_DIR}/rmm && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/custrings && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cudf && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cuml && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cugraph && \
    ./build.sh
RUN cd ${RAPIDS_DIR} && \
    ./build.sh xgboost
RUN cd ${RAPIDS_DIR} && \
    ./build.sh dask-xgboost
RUN cd ${RAPIDS_DIR} && \
    ./build.sh dask-cuda

WORKDIR ${RAPIDS_DIR}/notebooks
# Jupyter notebook port
EXPOSE 8888
# Dask Scheduler Bokeh port
EXPOSE 8787
EXPOSE 8786

ENTRYPOINT [ "/usr/bin/tini", "--" ]

# Set the env startup script var for non-interactive shells
ENV BASH_ENV=/.activate_rapids

# Set the default command to pass to the ENTRYPOINT if no command was given
CMD [ "/bin/bash" ]

# Copy Dockerfile as late as possible to avoid invalidating cache for trivial changes
COPY Dockerfile.ubuntu-devel /Dockerfile.ubuntu-devel
