# RAPIDS Dockerfile for CentOS7
#
# This multi-stage Dockerfile is used to create the "devel" image.
#
# RAPIDS is built from-source and installed in the 'rapids' conda
# environment. The sources and toolchains to build RAPIDS are included in this
# image. RAPIDS jupyter notebooks are also provided, as well as jupyterlab and
# all the dependencies required to run them.
#
# Copyright (c) 2019, NVIDIA CORPORATION.

# These ARGs are used in multiple stages and must be defined prior to first FROM

ARG CUDA_TYPE=devel
ARG CUDA_VERSION=10.0
ARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}
ARG LINUX_VERSION=centos7

FROM gpuci/miniconda-cuda:${CUDA_VERSION}-${CUDA_TYPE}-${LINUX_VERSION} AS base

ARG CUDA_VERSION
ARG CUDA_MAJORMINOR_VERSION
ARG GCC7_DIR=/usr/local/gcc7

runcommand ../../commands/utils/dumpDockerArgsFromConfig.sh

ENV CUDA_VERSION=${CUDA_MAJORMINOR_VERSION}
ENV RAPIDS_DIR=/rapids

insertfile gcc7_centos7
insertfile conda_install_devel

# Copy files needed by RAPIDS and 3rd parties for builds, test, and runtime.
RUN mkdir -p ${RAPIDS_DIR} ${GCC7_DIR}/lib64
COPY rapids ${RAPIDS_DIR}
COPY utils ${RAPIDS_DIR}/utils
# Add test file for testing notebooks from within the container
COPY supportfiles/test.sh /test.sh
# Add compatible libm
COPY supportfiles/libm.so.6 ${GCC7_DIR}/lib64

# clone.sh is generated by `rapidsdevtool.sh buildDockerImage` and is based on
# the URLs and branch names in the config file.
RUN cd ${RAPIDS_DIR} && ./clone.sh

# Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps
# This will need to be removed later since it causes problems with certain runtime libs (numba.cuda)
ENV LD_LIBRARY_PATH_PREBUILD=${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs

# xgboost build will not find nccl in the conda env without this env var
ENV NCCL_ROOT=/conda/envs/rapids

# Assume the build.sh script is present.
# (this is done automatically when using 'rapidsdevtool.sh buildDockerImage',
#  see rapidsdevtool.sh help for more details)
RUN source activate rapids && cd ${RAPIDS_DIR}/rmm && \
    ./build.sh
RUN source activate rapids && cd ${RAPIDS_DIR}/custrings && \
    ./build.sh
RUN source activate rapids && cd ${RAPIDS_DIR}/cudf && \
    ./build.sh
RUN source activate rapids && cd ${RAPIDS_DIR}/cuml && \
    ./build.sh
RUN source activate rapids && cd ${RAPIDS_DIR}/cugraph && \
    ./build.sh
RUN source activate rapids && cd ${RAPIDS_DIR} && \
    ./build.sh xgboost
RUN source activate rapids && cd ${RAPIDS_DIR} && \
    ./build.sh dask-xgboost
RUN source activate rapids && cd ${RAPIDS_DIR} && \
    ./build.sh dask-cuda

#
# Change LD_LIBRARY_PATH to exclude /usr/local/cuda/* since
# numba.cuda cannot load that, and instead have it load
# /lib64/libcuda.so instead
#
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH_PREBUILD}

WORKDIR ${RAPIDS_DIR}/notebooks
# Jupyter notebook port
EXPOSE 8888
# Dask Scheduler Bokeh port
EXPOSE 8787
EXPOSE 8786

# Allow non-root to modify /rapids sources
RUN chmod -R ugo+w /rapids

# Activate the rapids conda env for interactive shells via the default .bashrc
# The ENTRYPOINT script (see below) still sets the env, but this ensures the
# interactive settings (prompt) are set properly too.  root did not read
# /etc/bash.bashrc, so also add to /root/.bashrc
RUN echo "source activate rapids" >> /etc/bash.bashrc
RUN echo "source activate rapids" >> /root/.bashrc

# Create a dedicated startup env script that activates the rapids conda env for
# use with the non-interactive bash env var, to be set later. Then create a new
# script to exec the command (if given) in the environemnt set up by BASH_ENV
# and use it as the ENTRYPOINT.
RUN echo "source activate rapids" > /.activate_rapids
RUN chmod 777 /.activate_rapids
RUN echo "#!/bin/bash" > /.run_in_rapids_env
RUN echo "exec \"\$@\"" >> /.run_in_rapids_env
RUN chmod 777 /.run_in_rapids_env
ENTRYPOINT [ "/usr/bin/tini", "--", "/.run_in_rapids_env" ]

# Set the env startup script var for non-interactive shells
ENV BASH_ENV=/.activate_rapids

# Set the default command to pass to the ENTRYPOINT if no command was given
CMD [ "/bin/bash" ]

# Copy Dockerfile as late as possible to avoid invalidating cache for trivial changes
COPY Dockerfile.centos7-devel /Dockerfile.centos7-devel
