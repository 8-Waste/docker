#!/bin/bash
set -e

NUMARGS=$#
ARGS=$*

# This assumes the script resides in the rapids dir that will contain the cloned repos!
cd $(dirname $0)
RAPIDSDIR=$(pwd)

function logger() {
    TS=`date`
    echo "[$TS] $@"
}

function clone() {
  repo=$1
  directory=$2
  branch=${3:-""}
  noremote=${4:-""}

  rm -rf ${directory}

  if [[ ${branch} != "" ]]; then
      logger "Cloning '$branch' branch of $repo"
      # FIXME: --depth 1 is breaking builds - investigate
      #git clone --depth 1 --single-branch -b ${branch} ${repo} ${directory}
      git clone --single-branch -b ${branch} ${repo} ${directory}
  else
      logger "Cloning $repo"
      # FIXME: --depth 1 is breaking builds - investigate
      #git clone --depth 1 ${repo} ${directory}
      git clone ${repo} ${directory}
  fi
  cd ${RAPIDSDIR}/${directory}

  if [[ ${noremote} == "noremote" ]]; then
      git submodule update --init --recursive
  else
      git submodule update --init --remote --recursive
  fi
  git fetch --tags
  # FIXME: These lines result in an uncommitted file, and a 'dirty' tag to be added to some version strings - are they needed?
  #echo "${repo}" > current-commit.hash
  #git rev-parse HEAD >> current-commit.hash
  cd ${RAPIDSDIR}
}

function shouldClone {
    (( ${NUMARGS} == 0 )) || (echo " ${ARGS} " | grep -q " $1 ")
}

#:# Insert calls to "clone" for each of the RAPIDS repos defined in the config
runcommand ../../commands/utils/dumpRapidsCloneCmds.sh

logger "Done"
