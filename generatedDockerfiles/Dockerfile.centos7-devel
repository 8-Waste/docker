#
# This file was generated! Edits made directly to this file may be lost.
#   Timestamp:    2019-08-11
#
# RAPIDS Dockerfile for CentOS7
#
# This multi-stage Dockerfile is used to create the "devel" image.
#
# RAPIDS is built from-source and installed in the 'rapids' conda
# environment. The sources and toolchains to build RAPIDS are included in this
# image. RAPIDS jupyter notebooks are also provided, as well as jupyterlab and
# all the dependencies required to run them.
#
# Copyright (c) 2019, NVIDIA CORPORATION.

# These ARGs are used in multiple stages and must be defined prior to first FROM

ARG CUDA_TYPE=devel
ARG CUDA_VERSION=10.0
ARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}
ARG LINUX_VERSION=centos7
ARG PYTHON_VERSION=3.6
FROM gpuci/miniconda-cuda:${CUDA_VERSION}-${CUDA_TYPE}-${LINUX_VERSION}-py${PYTHON_VERSION} AS base

ARG CUDA_VERSION
ARG CUDA_MAJORMINOR_VERSION
ARG GCC7_DIR=/usr/local/gcc7
ARG PARALLEL_LEVEL

ARG ARROW_CPP_VERSION=0.14.1
ARG CC_VERSION=7
ARG CFFI_VERSION=1.11.5
ARG CMAKE_VERSION=3.14
ARG CXX_VERSION=7
ARG CYTHON_VERSION=0.29.*
ARG DASK_VERSION=">2"
ARG DASK_XGBOOST_CONDA_VERSION_SPEC=0.2*
ARG DISTRIBUTED_VERSION=">2"
ARG FAISSGPU_VERSION=1.5.0
ARG HASH_JOIN=ON
ARG IPYTHON_VERSION=7.3*
ARG NCCL_CONDA_VERSION=">2"
ARG NUMBA_VERSION=0.41
ARG NUMPY_VERSION=1.16.2
ARG NVIDIA_CONDA_LABEL=nvidia
ARG PANDAS_VERSION=0.24.2
ARG PYARROW_VERSION=0.14.1
ARG PYTHON_VERSION=3.6
ARG RAPIDSAI_CONDA_LABEL=rapidsai
ARG RAPIDS_CONDA_VERSION_SPEC=0.9*
ARG RAPIDSAI_NIGHTLY_CONDA_LABEL=rapidsai-nightly
ARG XGBOOST_CONDA_VERSION_SPEC=0.90.rapidsdev1
ARG XGBOOST_CONDA_LABEL=rapidsai/label/xgboost
ARG XGBOOST_VERSION=0.90

ENV CUDA_VERSION=${CUDA_MAJORMINOR_VERSION}
ENV RAPIDS_DIR=/rapids

#
# The support dir contains RPMs that enable additional repos needed
# for CentOS (among other things). Copy them to a temp dir and remove
# after installed.
#
COPY supportfiles/*.rpm /tmp

RUN yum install -y /tmp/*.rpm && \
    rm -rf /tmp/*.rpm && \
    yum upgrade -y && \
    yum install -y \
      bzip2 \
      curl \
      git \
      screen \
      vim \
      wget \
      which \
      libnccl-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \
      libnccl-devel-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION} \
      libnccl-static-2.4.2-1+cuda${CUDA_MAJORMINOR_VERSION}

# Install gcc7 from prebuilt image
COPY --from=gpuci/builds-gcc7:10.0-devel-centos7 /usr/local/gcc7 /usr/local/gcc7

# Update environment to use new gcc7
ENV CC=${GCC7_DIR}/bin/gcc
ENV CXX=${GCC7_DIR}/bin/g++
ENV PATH=${GCC7_DIR}/bin:$PATH
ENV CUDAHOSTCXX=${GCC7_DIR}/bin/g++
ENV LD_LIBRARY_PATH=${GCC7_DIR}/lib64
RUN export CUDA_MAJOR=`echo $CUDA_VERSION | cut -d'.' -f1` && \
    export CUDA_MINOR=`echo $CUDA_VERSION | cut -d'.' -f2` && \
    conda install -y \
      -c ${RAPIDSAI_CONDA_LABEL} \
      -c ${RAPIDSAI_NIGHTLY_CONDA_LABEL} \
      -c ${NVIDIA_CONDA_LABEL} \
      -c nvidia \
      -c numba \
      -c conda-forge \
      -c pytorch \
      -c defaults \
      nomkl \
      arrow-cpp=${PYARROW_VERSION} \
      bokeh \
      cffi=${CFFI_VERSION} \
      cmake=${CMAKE_VERSION} \
      cmake_setuptools">=0.1.3" \
      cuda${CUDA_MAJOR}${CUDA_MINOR} \
      cudatoolkit=${CUDA_MAJORMINOR_VERSION} \
      cython=${CYTHON_VERSION} \
      dask=${DASK_VERSION} \
      dask-labextension \
      distributed=${DISTRIBUTED_VERSION} \
      double-conversion \
      dlpack \
      flatbuffers \
      ipython=${IPYTHON_VERSION} \
      jupyterlab \
      libclang \
      liblapack \
      make \
      matplotlib \
      nccl=${NCCL_CONDA_VERSION} \
      networkx \
      nodejs \
      numba=${NUMBA_VERSION} \
      numpy=${NUMPY_VERSION} \
      conda-forge::blas=1.1=openblas \
      pandas=${PANDAS_VERSION} \
      pyarrow=${PYARROW_VERSION} \
      pytest \
      rapidjson \
      scikit-learn \
      scipy=${SCIPY_VERSION} \
      seaborn \
      tensorflow \
    && conda clean -afy \
    && chmod -R ugo+w /opt/conda

# Special case: libcumlmg is not available for CUDA 9.2
RUN if [ "${CUDA_MAJORMINOR_VERSION}" != "9.2" ]; then conda install -y --no-deps -c ${NVIDIA_CONDA_LABEL} -c conda-forge libcumlmg; fi

RUN jupyter labextension install dask-labextension

# Copy files needed by RAPIDS and 3rd parties for builds, test, and runtime.
RUN mkdir -p ${RAPIDS_DIR} ${GCC7_DIR}/lib64
COPY rapids ${RAPIDS_DIR}
COPY utils ${RAPIDS_DIR}/utils
# Add test file for testing notebooks from within the container
COPY supportfiles/test.sh /test.sh
# Add compatible libm
COPY supportfiles/libm.so.6 ${GCC7_DIR}/lib64

# clone.sh is generated by `rapidsdevtool.sh buildDockerImage` and is based on
# the URLs and branch names in the config file.
RUN cd ${RAPIDS_DIR} && ./clone.sh

# Add /usr/local/cuda/* temporarily to LD_LIBRARY_PATH to support various build steps
# This will need to be removed later since it causes problems with certain runtime libs (numba.cuda)
ENV LD_LIBRARY_PATH_PREBUILD=${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs

# xgboost build will not find nccl in the conda env without this env var
ENV NCCL_ROOT=/conda/envs/rapids

# Assume the build.sh script is present.
# (this is done automatically when using 'rapidsdevtool.sh buildDockerImage',
#  see rapidsdevtool.sh help for more details)
RUN cd ${RAPIDS_DIR}/rmm && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/custrings && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cudf && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cuml && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cugraph && \
    ./build.sh
RUN cd ${RAPIDS_DIR} && \
    ./build.sh xgboost
RUN cd ${RAPIDS_DIR} && \
    ./build.sh dask-xgboost
RUN cd ${RAPIDS_DIR} && \
    ./build.sh dask-cuda

#
# Change LD_LIBRARY_PATH to exclude /usr/local/cuda/* since
# numba.cuda cannot load that, and instead have it load
# /lib64/libcuda.so instead
#
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH_PREBUILD}

WORKDIR ${RAPIDS_DIR}/notebooks
# Jupyter notebook port
EXPOSE 8888
# Dask Scheduler Bokeh port
EXPOSE 8787
EXPOSE 8786

ENTRYPOINT [ "/usr/bin/tini", "--" ]

# Set the default command to pass to the ENTRYPOINT if no command was given
CMD [ "/bin/bash" ]

# Copy Dockerfile as late as possible to avoid invalidating cache for trivial changes
COPY Dockerfile.centos7-devel /Dockerfile.centos7-devel
