#
# This file was generated! Edits made directly to this file may be lost.
#   Timestamp:    Wed May  6 16:55:41 EDT 2020
#
# RAPIDS Dockerfile for Ubuntu "devel" image
#
# RAPIDS is built from-source and installed in the base conda environment. The
# sources and toolchains to build RAPIDS are included in this image. RAPIDS
# jupyter notebooks are also provided, as well as jupyterlab and all the
# dependencies required to run them.
#
# Copyright (c) 2019, NVIDIA CORPORATION.

ARG CUDA_TYPE=devel
ARG CUDA_VERSION=10.1
ARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}
ARG LINUX_VERSION=ubuntu18.04
ARG PYTHON_VERSION=3.7

FROM gpuci/miniconda-cuda-rapidsenv:${CUDA_VERSION}-${CUDA_TYPE}-${LINUX_VERSION}-py${PYTHON_VERSION}

# devel environment config args
ARG CC_VERSION=7
ARG CXX_VERSION=7
ARG PARALLEL_LEVEL=16

# base/runtime install specs
ARG DASK_XGBOOST_CONDA_VERSION_SPEC=0.2*
ARG RAPIDS_CONDA_VERSION_SPEC=0.14*

ARG CUDA_MAJORMINOR_VERSION
ARG PYTHON_VERSION

ENV CC=/usr/bin/gcc-${CC_VERSION}
ENV CXX=/usr/bin/g++-${CXX_VERSION}
ENV CUDAHOSTCXX=$CXX
ENV RAPIDS_DIR=/rapids
ENV LD_LIBRARY_PATH=/opt/conda/envs/rapids/lib:${LD_LIBRARY_PATH}

# Install local gcc
# Update environment to use new gcc
ENV CC=/usr/bin/gcc-${CC_VERSION}
ENV CXX=/usr/bin/g++-${CXX_VERSION}
ENV CUDAHOSTCXX=/usr/bin/g++-${CXX_VERSION}
ENV PATH=${PATH}:/conda/bin

# 'rapidsdevtool.sh buildDockerImage' sets up the build context, including the
#  rapids directory being COPY'd below. See rapidsdevtool.sh help for details.
RUN mkdir -p ${RAPIDS_DIR}
COPY rapids ${RAPIDS_DIR}
COPY utils ${RAPIDS_DIR}/utils

# Install dependencies needed for devel: build deps + RAPIDS runtime deps
COPY supportfiles/.condarc /opt/conda/.condarc

# Env debug info
RUN source activate rapids \
    && env \
    && conda info \
    && conda config --show-sources \
    && conda list --show-channel-urls

# Install rapids-build-env from conda meta-pkg
RUN ${RAPIDS_DIR}/utils/condaretry install -y -n rapids --freeze-installed \
        rapids-build-env=${RAPIDS_CONDA_VERSION_SPEC}

# Install rapids-doc-env from conda meta-pkg
RUN ${RAPIDS_DIR}/utils/condaretry install -y -n rapids --freeze-installed \
        rapids-doc-env=${RAPIDS_CONDA_VERSION_SPEC}

# Env debug info
RUN source activate rapids \
    && env \
    && conda info \
    && conda config --show-sources \
    && conda list --show-channel-urls

# Install notebook env
# Env debug info
RUN source activate rapids \
    && env \
    && conda info \
    && conda config --show-sources \
    && conda list --show-channel-urls

# Install the rapids-notebook-env meta-pkg
RUN ${RAPIDS_DIR}/utils/condaretry install -y -n rapids --freeze-installed \
        rapids-notebook-env=${RAPIDS_CONDA_VERSION_SPEC} \
   && conda clean -afy \
   && chmod -R ugo+w /opt/conda

# Install jupyter lab stuff
RUN source activate rapids \
   && pip install "git+https://github.com/rapidsai/jupyterlab-nvdashboard.git@master#egg=jupyterlab-nvdashboard" --upgrade \
   && jupyter labextension install dask-labextension jupyterlab-nvdashboard
 
 # Install notebooks repo
 RUN cd ${RAPIDS_DIR} \
   && ./clone.sh notebooks \
   && chmod -R ugo+w /opt/conda ${RAPIDS_DIR}

# Add test file for testing notebooks from within the container
COPY supportfiles/test.sh /test.sh
COPY supportfiles/test-nbcontrib.sh /test-nbcontrib.sh

WORKDIR ${RAPIDS_DIR}/notebooks
# Jupyter notebook port
EXPOSE 8888
# Dask Scheduler Bokeh port
EXPOSE 8787
EXPOSE 8786

# Change the entrypoint to start the Jupyter server prior to running commands
COPY supportfiles/.start_jupyter_run_in_rapids /.run_in_rapids

# clone.sh is generated by `rapidsdevtool.sh buildDockerImage` and is based on
# the URLs and branch names in the repoSettings file.
RUN cd ${RAPIDS_DIR} && ./clone.sh

# Build RAPIDS
# xgboost build will not find nccl in the conda env without this env var
ENV NCCL_ROOT=/opt/conda/envs/rapids

# PARALLEL_LEVEL is a Docker ARG, set it in the ENV too
ENV PARALLEL_LEVEL=${PARALLEL_LEVEL}

# Assume the build.sh script is present.
# (this is done automatically when using 'rapidsdevtool.sh buildDockerImage',
#  see rapidsdevtool.sh help for more details)
RUN cd ${RAPIDS_DIR}/rmm && \
    source activate rapids && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cudf && \
    source activate rapids && \
    ./build.sh -l && \
    #FIXME: Should building tests be integrated into build.sh?
    cd cpp/build && \
    make -j${PARALLEL_LEVEL} build_tests_nvstrings && \
    make -j${PARALLEL_LEVEL} build_tests_cudf
RUN cd ${RAPIDS_DIR}/cusignal && \
    source activate rapids && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cuxfilter && \
    source activate rapids && \
    ./build.sh
# FIXME: Should not need to set CUSPATIAL_HOME and CUDF_HOME variables
RUN cd ${RAPIDS_DIR}/cuspatial && \
    source activate rapids && \
    export CUSPATIAL_HOME="$PWD" && \
    export CUDF_HOME="$PWD/../cudf" && \
    ./build.sh
RUN cd ${RAPIDS_DIR}/cuml && \
    source activate rapids && \
    ./build.sh --allgpuarch libcuml cuml prims
RUN cd ${RAPIDS_DIR}/cugraph && \
    source activate rapids && \
    ./build.sh
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh xgboost
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh dask-xgboost
RUN cd ${RAPIDS_DIR} && \
    source activate rapids && \
    ./build.sh dask-cuda

COPY supportfiles/.run_in_rapids /.run_in_rapids
ENTRYPOINT [ "/usr/bin/tini", "--", "/.run_in_rapids" ]

# Set the default command to pass to the ENTRYPOINT if no command was given
CMD [ "/bin/bash" ]

# Setup notebook environment
RUN source activate rapids \
   && pip install "git+https://github.com/rapidsai/jupyterlab-nvdashboard.git@master#egg=jupyterlab-nvdashboard" --upgrade \
   && jupyter labextension install dask-labextension jupyterlab-nvdashboard \
   && cd ${RAPIDS_DIR} \
   && ./clone.sh notebooks \
   && chmod -R ugo+w /opt/conda ${RAPIDS_DIR}

# Add test file for testing notebooks from within the container
COPY supportfiles/test.sh /test.sh

WORKDIR ${RAPIDS_DIR}/notebooks
# Jupyter notebook port
EXPOSE 8888
# Dask Scheduler Bokeh port
EXPOSE 8787
EXPOSE 8786

# Change the entrypoint to start the Jupyter server prior to running commands
COPY supportfiles/.start_jupyter_run_in_rapids /.run_in_rapids

# Copy Dockerfile as late as possible to avoid invalidating cache for trivial changes
COPY Dockerfile.ubuntu-devel /Dockerfile.ubuntu-devel
