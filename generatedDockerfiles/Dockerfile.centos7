#
# This file was generated! Edits made directly to this file may be lost.
#   Timestamp:    2019-07-24
#
# RAPIDS Dockerfile for CentOS7
#
# This multi-stage Dockerfile is used to create two images: base and runtime
#
# base: RAPIDS is installed from published conda packages to the 'rapids' conda
# environment.
#
# runtime: RAPIDS is installed from published conda packages to the 'rapids'
# conda environment. RAPIDS jupyter notebooks are also provided, as well as
# jupyterlab and all the dependencies required to run them.
#
# Copyright (c) 2019, NVIDIA CORPORATION.


ARG CUDA_TYPE=devel
ARG CUDA_VERSION=10.0
ARG CUDA_MAJORMINOR_VERSION=${CUDA_VERSION}
ARG LINUX_VERSION=centos7
ARG GCC7_DIR=/usr/local/gcc7

ARG CC_VERSION=7
ARG CXX_VERSION=7
ARG DASK_VERSION=">2"
ARG DASK_XGBOOST_CONDA_VERSION_SPEC=0.2*
ARG DISTRIBUTED_VERSION=">2"
ARG FAISSGPU_VERSION=1.5.0
ARG HASH_JOIN=ON
ARG IPYTHON_VERSION=7.3*
ARG NCCL_CONDA_VERSION=">2"
ARG NVIDIA_CONDA_LABEL=nvidia/label/cuda${CUDA_MAJORMINOR_VERSION}
ARG PYTHON_VERSION=3.6
ARG RAPIDSAI_CONDA_LABEL=rapidsai/label/cuda${CUDA_MAJORMINOR_VERSION}
ARG RAPIDS_CONDA_VERSION_SPEC=0.9*
ARG RAPIDSAI_NIGHTLY_CONDA_LABEL=rapidsai-nightly/label/cuda${CUDA_MAJORMINOR_VERSION}
ARG XGBOOST_CONDA_VERSION_SPEC=0.90*
ARG XGBOOST_CONDA_LABEL=rapidsai/label/xgboost
ARG XGBOOST_VERSION=0.90

FROM gpuci/miniconda-cuda:${CUDA_VERSION}-${CUDA_TYPE}-${LINUX_VERSION} AS base

# Retrieve values set prior to first FROM command for use below
ARG CUDA_MAJORMINOR_VERSION
ARG CUDA_VERSION
ARG DASK_XGBOOST_CONDA_VERSION_SPEC
ARG GCC7_DIR
ARG IPYTHON_VERSION
ARG NUMBA_VERSION
ARG NUMPY_VERSION
ARG NVIDIA_CONDA_LABEL
ARG PANDAS_VERSION
ARG PYARROW_VERSION
ARG PYTHON_VERSION
ARG RAPIDSAI_CONDA_LABEL
ARG RAPIDSAI_NIGHTLY_CONDA_LABEL
ARG RAPIDS_CONDA_VERSION_SPEC
ARG SUPPORT_FILES_DIR=supportfiles
ARG XGBOOST_CONDA_LABEL
ARG XGBOOST_VERSION

ENV PATH=${GCC7_DIR}/bin:$PATH
ENV LD_LIBRARY_PATH=${GCC7_DIR}/lib64
ENV CUDA_VERSION=${CUDA_MAJORMINOR_VERSION}
ENV RAPIDS_DIR=/rapids
ENV BASH_ENV=

# 'rapidsdevtool.sh buildDockerImage' sets up the build context, including the
#  rapids directory being COPY'd below. See rapidsdevtool.sh help for details.
RUN mkdir -p ${RAPIDS_DIR}
COPY rapids ${RAPIDS_DIR}
COPY utils ${RAPIDS_DIR}/${UTILS_DIR}
# Add test file for testing notebooks from within the container
COPY ${SUPPORT_FILES_DIR}/test.sh /test.sh

# Option: 'conda install' all RAPIDS packages.
# This ensures the RAPIDS conda packages install correctly and (should) only
# install the minimal set of packages needed, but relies on anaconda.org servers
# and can be slow.

# NOTE: use these mirrors for faster downloads
#       -c http://10.33.227.188:88/numba \
#       -c http://10.33.227.188:88/conda-forge \
RUN export CUDA_MAJOR=`echo $CUDA_VERSION | cut -d'.' -f1` && \
    export CUDA_MINOR=`echo $CUDA_VERSION | cut -d'.' -f2` && \
    conda create -n rapids python=${PYTHON_VERSION} && \
    conda install -n rapids -y \
      -c ${RAPIDSAI_CONDA_LABEL} \
      -c ${RAPIDSAI_NIGHTLY_CONDA_LABEL} \
      -c ${NVIDIA_CONDA_LABEL} \
      -c nvidia \
      -c ${XGBOOST_CONDA_LABEL} \
      -c numba \
      -c conda-forge \
      -c pytorch \
      -c defaults \
      cudatoolkit=${CUDA_MAJOR}.${CUDA_MINOR} \
      pytest \
      openblas \
      cudf=${RAPIDS_CONDA_VERSION_SPEC} \
      cuml=${RAPIDS_CONDA_VERSION_SPEC} \
      cugraph=${RAPIDS_CONDA_VERSION_SPEC} \
      xgboost=${XGBOOST_VERSION} \
      dask-xgboost=${DASK_XGBOOST_CONDA_VERSION_SPEC} \
      dask-cuda=${RAPIDS_CONDA_VERSION_SPEC} \
      dask-cudf=${RAPIDS_CONDA_VERSION_SPEC} \
      dask-cuml=${RAPIDS_CONDA_VERSION_SPEC} \
   && conda clean -a

WORKDIR ${RAPIDS_DIR}

# Activate the rapids conda env for interactive shells via the default .bashrc
# The ENTRYPOINT script (see below) still sets the env, but this ensures the
# interactive settings (prompt) are set properly too.  root did not read
# /etc/bash.bashrc, so also add to /root/.bashrc
RUN echo "source activate rapids" >> /etc/bash.bashrc
RUN echo "source activate rapids" >> /root/.bashrc

# Create a dedicated startup env script that activates the rapids conda env for
# use with the non-interactive bash env var, to be set later. Then create a new
# script to exec the command (if given) in the environemnt set up by BASH_ENV
# and use it as the ENTRYPOINT.
RUN echo "source activate rapids" > /.activate_rapids
RUN chmod 777 /.activate_rapids
RUN echo "#!/bin/bash" > /.run_in_rapids_env
RUN echo "exec \"\$@\"" >> /.run_in_rapids_env
RUN chmod 777 /.run_in_rapids_env
ENTRYPOINT [ "/usr/bin/tini", "--", "/.run_in_rapids_env" ]

# Set the default command to pass to the ENTRYPOINT if no command was given
CMD [ "/bin/bash" ]

# Copy Dockerfile as late as possible to avoid invalidating cache for trivial changes
COPY Dockerfile.centos7 /Dockerfile.centos7

################################################################################
FROM base AS runtime

# Retrieve values set prior to first FROM command for use below
ARG CUDA_MAJORMINOR_VERSION
ARG CUDA_VERSION
ARG GCC7_DIR
ARG IPYTHON_VERSION
ARG NUMBA_VERSION
ARG NUMPY_VERSION
ARG NVIDIA_CONDA_LABEL
ARG PANDAS_VERSION
ARG PYARROW_VERSION
ARG RAPIDSAI_CONDA_LABEL
ARG RAPIDSAI_NIGHTLY_CONDA_LABEL

ENV BASH_ENV=

# NOTE: use these mirrors for faster downloads
#       -c http://10.33.227.188:88/numba \
#       -c http://10.33.227.188:88/conda-forge \
RUN export CUDA_MAJOR=`echo $CUDA_VERSION | cut -d'.' -f1` && \
    export CUDA_MINOR=`echo $CUDA_VERSION | cut -d'.' -f2` && \
    conda install -n rapids -y \
      -c ${RAPIDSAI_CONDA_LABEL} \
      -c ${RAPIDSAI_NIGHTLY_CONDA_LABEL} \
      -c ${NVIDIA_CONDA_LABEL} \
      -c nvidia \
      -c numba \
      -c conda-forge \
      -c pytorch \
      -c defaults \
      cudatoolkit=${CUDA_MAJOR}.${CUDA_MINOR} \
      bokeh \
      ipython=${IPYTHON_VERSION} \
      jupyterlab \
      matplotlib \
      networkx \
      numba=${NUMBA_VERSION} \
      numpy=${NUMPY_VERSION} \
      pandas=${PANDAS_VERSION} \
      pyarrow=${PYARROW_VERSION} \
      scikit-learn \
      scipy \
      seaborn \
   && conda clean -a

# clone.sh is generated by `rapidsdevtool.sh buildDockerImage` and is based on
# the URLs and branch names in the config file.
RUN cd ${RAPIDS_DIR} && ./clone.sh notebooks

WORKDIR ${RAPIDS_DIR}/notebooks
# Jupyter notebook port
EXPOSE 8888
# Dask Scheduler Bokeh port
EXPOSE 8787
EXPOSE 8786

# Set the env startup script var for non-interactive shells
ENV BASH_ENV=/.activate_rapids
